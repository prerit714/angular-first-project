1. Now I will learn how to
  1. Display data
  2. Apply classes / styles dynamically
  3. Format data using pipes
  4. Handle Events

2. Add bootstrap with the following command
  $ ?sudo npm install bootstrap --save
  --save flag adds bootstrap as a dependency in the package.json

3. To test this code on a different machine, just do the following
  $ ?sudo npm install

4. To make a component useful it should be capable to pass data in and out

-- Below can be think of a syntax to pass in data(imageUrl) to a dom object img
<img [src]="imageUrl" />
-- Same can be said for below
<button (click)="onClick()"> <button>

-- I wish to make <favorite></favorite> component work like below
<favorite [isFavorite]="post.isFavorite" (change)="onFavoriteChange()"></favorite>

-- Shadow DOM
  Allows us to apply scoped styles to elements without bleeding out to the
  outer world, ( old browsers don't support this )


  var el = document.querySelector("foo");

  // create shadow dom, by this styles are scoped only to this
  // it will not leak out
  var root = el.createShadowRoot();

  root.innerHTML = `
    <style> h1 { color: red } </style>
    <h1> Hello world! </h1>
  `;

-- Now that I am done with basics, Moving on to Directives
-- Below are default ng directives
  ngFor
  ngIf
  ngSwitchCase
  ngClass
  ngStyle

-- The leading asterisk

<div *ngIf="courses.length > 0; else noCourses">
  List of Courses
</div>
<ng-template #noCourses>
  No course
</ng-template>

-- is translated to (by angular)

<ng-template>
  <div [ngIf]="courses.length > 0>
    List of Courses
  </div>
<ng-template>
<ng-template [ngif]="!(courses.length > 0)">
  No course
</ng-template>
